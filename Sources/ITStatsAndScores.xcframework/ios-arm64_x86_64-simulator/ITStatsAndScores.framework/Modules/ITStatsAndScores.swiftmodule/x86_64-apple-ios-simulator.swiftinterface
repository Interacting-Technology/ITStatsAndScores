// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name ITStatsAndScores
import Combine
import CoreGraphics
import CoreText
import DeveloperToolsSupport
import Foundation
@_exported import ITStatsAndScores
import MessageUI
import OSLog
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension ITStatsAndScores.ITStatsAndScoresAccess {
  public func pushLiteTeamScreen(externalId: Swift.String, selectedTab: ITStatsAndScores.LiteTeamInfo, in viewController: UIKit.UIViewController? = nil)
  public func presentLiteTeamScreen(externalId: Swift.String, selectedTab: ITStatsAndScores.LiteTeamInfo, in viewController: UIKit.UIViewController? = nil)
}
extension ITStatsAndScores.ITStatsAndScoresAccess {
  public func presentLineupsScreen(fixtureId: Swift.String, in viewController: UIKit.UIViewController, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void)
  public func getUIViewForLineupsScreen(fixtureId: Swift.String, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void) -> UIKit.UIView
}
extension ITStatsAndScores.ITStatsAndScoresAccess {
  public func presentLineupsScreenView(fixtureId: Swift.String, in viewController: UIKit.UIViewController, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void) -> some SwiftUI.UIViewControllerRepresentable
  
}
public enum AnalyticsEvent : Swift.String {
  case statsandscore_interaction
  case page_load
  case user_Interaction
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension ITStatsAndScores.ITStatsAndScoresAccess {
  public func presentStatisticsScreen(fixtureId: Swift.String, in viewController: UIKit.UIViewController, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void)
  public func getUIViewForStatisticsScreen(fixtureId: Swift.String, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void) -> UIKit.UIView
}
extension ITStatsAndScores.ITStatsAndScoresAccess {
  public func presentStatisticsScreenView(fixtureId: Swift.String, in viewController: UIKit.UIViewController, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void) -> some SwiftUI.UIViewControllerRepresentable
  
}
#warning("JH - This is not a good solution - should be from Server")
public enum LiteFixtureTab {
  case compare_h2h
  case lineups
  case liveUpdates_commentaries
  case statistics
  public static func == (a: ITStatsAndScores.LiteFixtureTab, b: ITStatsAndScores.LiteFixtureTab) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ITStatsAndScores.ITStatsAndScoresAccess {
  public func presentTeamPlayersStatsScreen(contestantId: Swift.String, in viewController: UIKit.UIViewController, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void)
  public func getUIViewForTeamPlayersStatsScreen(contestantId: Swift.String, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void) -> UIKit.UIView
}
extension ITStatsAndScores.ITStatsAndScoresAccess {
  public func presentTeamPlayersStatsScreenView(contestantId: Swift.String, in viewController: UIKit.UIViewController, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void) -> some SwiftUI.UIViewControllerRepresentable
  
}
@_Concurrency.MainActor(unsafe) public struct PublicTestView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init()
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16ITStatsAndScores14PublicTestViewV4bodyQrvp", 0) __
}
public enum LiteCompetitionInfo {
  case matches
  case table
  case playoffs
  case leagueStats
  case playersStats
  public static func == (a: ITStatsAndScores.LiteCompetitionInfo, b: ITStatsAndScores.LiteCompetitionInfo) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class ITStatsAndScoresAccess {
  public static var shared: ITStatsAndScores.ITStatsAndScoresAccess
  public var navigationDelegate: (any ITStatsAndScores.ITNavigationBridgeDelegate)?
  public var followingAndRemindersDelegate: (any ITStatsAndScores.ITFollowingAndRemindersDelegate)? {
    get
    set
  }
  public var analyticsDelegate: (any ITStatsAndScores.ITAnalyticsDelegate)?
  public var disableLogs: Swift.Bool {
    get
    set
  }
  public func configure(with configuration: ITStatsAndScores.ITConfiguration)
  public func updateFollowingAndReminders()
  @objc deinit
}
public enum OldAnalyticsEvent : Swift.String {
  case page_load
  case user_Interaction
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension ITStatsAndScores.ITStatsAndScoresAccess {
  public func presentLiveUpdatesScreen(fixtureId: Swift.String, in viewController: UIKit.UIViewController, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void)
  public func getUIViewForLiveUpdatesScreen(fixtureId: Swift.String, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void) -> UIKit.UIView
}
extension ITStatsAndScores.ITStatsAndScoresAccess {
  public func presentLiveUpdatesScreenView(fixtureId: Swift.String, in viewController: UIKit.UIViewController, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void) -> some SwiftUI.UIViewControllerRepresentable
  
}
extension ITStatsAndScores.ITStatsAndScoresAccess {
  public func pushLiteCompetitionScreen(externalId: Swift.String, selectedTab: ITStatsAndScores.LiteCompetitionInfo, in viewController: UIKit.UIViewController? = nil)
  public func presentLiteCompetitionScreen(externalId: Swift.String, selectedTab: ITStatsAndScores.LiteCompetitionInfo, in viewController: UIKit.UIViewController? = nil)
}
extension ITStatsAndScores.ITStatsAndScoresAccess {
  public func presentHead2HeadScreen(fixtureId: Swift.String, in viewController: UIKit.UIViewController, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void)
  public func getUIViewForHead2HeadScreen(fixtureId: Swift.String, navigationController: UIKit.UINavigationController, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void) -> UIKit.UIView
}
extension ITStatsAndScores.ITStatsAndScoresAccess {
  public func presentHead2HeadScreenView(fixtureId: Swift.String, in viewController: UIKit.UIViewController, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void) -> some SwiftUI.UIViewControllerRepresentable
  
}
extension ITStatsAndScores.ITStatsAndScoresAccess {
  public func presentScoresScreen(in viewController: UIKit.UIViewController)
}
extension ITStatsAndScores.ITStatsAndScoresAccess {
  public func presentScoresScreenView(in viewController: UIKit.UIViewController) -> some SwiftUI.UIViewControllerRepresentable
  
}
extension ITStatsAndScores.ITStatsAndScoresAccess {
  public func presentCompetitionLeagueStatsScreen(competitionId: Swift.String, competitionSeasonId: Swift.String? = nil, in viewController: UIKit.UIViewController, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void)
  public func getUIViewForCompetitionLeagueStatsScreen(competitionId: Swift.String, competitionSeasonId: Swift.String? = nil, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void) -> UIKit.UIView
}
extension ITStatsAndScores.ITStatsAndScoresAccess {
  public func presentCompetitionLeagueStatsScreenView(competitionId: Swift.String, competitionSeasonId: Swift.String? = nil, in viewController: UIKit.UIViewController, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void) -> some SwiftUI.UIViewControllerRepresentable
  
}
#warning("JH - This is not a good solution - should be from Server")
@frozen public struct ITConfiguration {
  @usableFromInline
  internal let userId: Swift.String
  @usableFromInline
  internal var language: Swift.String
  @usableFromInline
  internal var country: Swift.String
  @inlinable public init(userId: Swift.String, language: Swift.String, country: Swift.String) {
        self.userId = userId
        
        let lowercasedCountry = country.lowercased()
        let lowercasedLanguage = language.lowercased()
        
        /*
        if lowercasedLanguage != "en" && lowercasedLanguage != "es" {
        #warning("HARD CODED CONFIGURATION language normalized to \"en\" or \"es\" as they are the only languages supported")
            if lowercasedCountry == "es" {
                self.language = "es"
            } else {
                self.language = "en"
            }
        } else {
            self.language = lowercasedLanguage
        }
         */
        
        self.language = lowercasedLanguage
        self.country = lowercasedCountry
    }
}
extension ITStatsAndScores.ITStatsAndScoresAccess {
  public func presentCompetitionMatchesScreen(competitionId: Swift.String, competitionSeasonId: Swift.String? = nil, in viewController: UIKit.UIViewController, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void)
  public func getUIViewForCompetitionMatchesScreen(competitionId: Swift.String, competitionSeasonId: Swift.String? = nil, navigationController: UIKit.UINavigationController, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void) -> UIKit.UIView
}
extension ITStatsAndScores.ITStatsAndScoresAccess {
  public func presentCompetitionMatchesScreenView(competitionId: Swift.String, competitionSeasonId: Swift.String? = nil, in viewController: UIKit.UIViewController, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void) -> some SwiftUI.UIViewControllerRepresentable
  
}
extension ITStatsAndScores.ITStatsAndScoresAccess {
  public func presentTeamTableScreen(contestantId: Swift.String, in viewController: UIKit.UIViewController, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void)
  public func getUIViewForTeamTableScreen(contestantId: Swift.String, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void) -> UIKit.UIView
}
extension ITStatsAndScores.ITStatsAndScoresAccess {
  public func presentTeamTableScreenView(contestantId: Swift.String, in viewController: UIKit.UIViewController, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void) -> some SwiftUI.UIViewControllerRepresentable
  
}
public enum LiteTeamInfo : Swift.Int {
  case matches
  case overview
  case table
  case squad
  case teamStats
  case playersStats
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension ITStatsAndScores.ITStatsAndScoresAccess {
  public func presentTeamOverviewScreen(contestantId: Swift.String, in viewController: UIKit.UIViewController, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void)
  public func getUIViewForTeamOverviewScreen(contestantId: Swift.String, navigationController: UIKit.UINavigationController, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void) -> UIKit.UIView
}
extension ITStatsAndScores.ITStatsAndScoresAccess {
  public func presentTeamOverviewScreenView(contestantId: Swift.String, in viewController: UIKit.UIViewController, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void) -> some SwiftUI.UIViewControllerRepresentable
  
}
extension UIKit.UIWindow {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func motionEnded(_ motion: UIKit.UIEvent.EventSubtype, with event: UIKit.UIEvent?)
}
public typealias FollowingListJSONString = Swift.String
public protocol ITFollowingAndRemindersDelegate {
  func getFollowingAndReminders(followingListJSON: @escaping (ITStatsAndScores.FollowingListJSONString) -> ())
  func setReminderButtonTappedFor(fixtureId: Swift.String, sourceName: Swift.String?, setReminderTurnOn: @escaping (Swift.Bool) -> ())
  func setFollowButtonTappedFor(id: Swift.String, sourceName: Swift.String?, followType: ITStatsAndScores.ITFollowType, setFollowTurnOn: @escaping (Swift.Bool) -> ())
}
public protocol ITNavigationBridgeDelegate : AnyObject {
  func navigateTo(destinationDetails jsonString: Swift.String, navigationType: ITStatsAndScores.ITNavigationType, navigationController: UIKit.UINavigationController?)
}
public enum ITNavigationType : Swift.String {
  case fixture
  case competition
  case contestant
  public var jsonDaznIdParameterKey: Swift.String {
    get
  }
  public var jsonProviderExternalIdParameterKey: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ITFollowType : Swift.String {
  case competition
  case contestant
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol ITAnalyticsDelegate {
  func report(event: ITStatsAndScores.AnalyticsEvent, parameters: [Swift.String : Any])
}
extension ITStatsAndScores.ITStatsAndScoresAccess {
  public func presentCompetitionPlayersStatsScreen(competitionId: Swift.String, competitionSeasonId: Swift.String? = nil, in viewController: UIKit.UIViewController, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void)
  public func getUIViewForCompetitionPlayersStatsScreen(competitionId: Swift.String, competitionSeasonId: Swift.String? = nil, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void) -> UIKit.UIView
}
extension ITStatsAndScores.ITStatsAndScoresAccess {
  public func presentCompetitionPlayersStatsScreenView(competitionId: Swift.String, competitionSeasonId: Swift.String? = nil, in viewController: UIKit.UIViewController, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void) -> some SwiftUI.UIViewControllerRepresentable
  
}
extension ITStatsAndScores.ITStatsAndScoresAccess {
  public func presentTeamSquadScreen(contestantId: Swift.String, in viewController: UIKit.UIViewController, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void)
  public func getUIViewForTeamSquadScreen(contestantId: Swift.String, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void) -> UIKit.UIView
}
extension ITStatsAndScores.ITStatsAndScoresAccess {
  public func presentTeamSquadScreenView(contestantId: Swift.String, in viewController: UIKit.UIViewController, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void) -> some SwiftUI.UIViewControllerRepresentable
  
}
extension ITStatsAndScores.ITStatsAndScoresAccess {
  public func presentTeamStatsTeamScreen(contestantId: Swift.String, in viewController: UIKit.UIViewController, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void)
  public func getUIViewForTeamStatsTeamScreen(contestantId: Swift.String, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void) -> UIKit.UIView
}
extension ITStatsAndScores.ITStatsAndScoresAccess {
  public func presentTeamStatsTeamScreenView(contestantId: Swift.String, in viewController: UIKit.UIViewController, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void) -> some SwiftUI.UIViewControllerRepresentable
  
}
extension ITStatsAndScores.ITStatsAndScoresAccess {
  public func presentCompetitionTableScreen(competitionId: Swift.String, competitionSeasonId: Swift.String? = nil, in viewController: UIKit.UIViewController, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void)
  public func getUIViewForCompetitionTableScreen(competitionId: Swift.String, competitionSeasonId: Swift.String? = nil, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void) -> UIKit.UIView
}
extension ITStatsAndScores.ITStatsAndScoresAccess {
  public func presentCompetitionTableScreenView(competitionId: Swift.String, competitionSeasonId: Swift.String? = nil, in viewController: UIKit.UIViewController, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void) -> some SwiftUI.UIViewControllerRepresentable
  
}
extension ITStatsAndScores.ITStatsAndScoresAccess {
  public func presentTeamMatchesScreen(contestantId: Swift.String, in viewController: UIKit.UIViewController, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void)
  public func getUIViewForTeamMatchesScreen(contestantId: Swift.String, navigationController: UIKit.UINavigationController, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void) -> UIKit.UIView
}
extension ITStatsAndScores.ITStatsAndScoresAccess {
  public func presentTeamMatchesScreenView(contestantId: Swift.String, in viewController: UIKit.UIViewController, contentHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void) -> some SwiftUI.UIViewControllerRepresentable
  
}
extension ITStatsAndScores.ITStatsAndScoresAccess {
  public func pushLiteFixtureScreen(externalId: Swift.String, selectedTab: ITStatsAndScores.LiteFixtureTab, in viewController: UIKit.UIViewController? = nil)
  public func presentLiteFixtureScreen(externalId: Swift.String, selectedTab: ITStatsAndScores.LiteFixtureTab, in viewController: UIKit.UIViewController? = nil)
}
extension ITStatsAndScores.AnalyticsEvent : Swift.Equatable {}
extension ITStatsAndScores.AnalyticsEvent : Swift.Hashable {}
extension ITStatsAndScores.AnalyticsEvent : Swift.RawRepresentable {}
extension ITStatsAndScores.LiteFixtureTab : Swift.Equatable {}
extension ITStatsAndScores.LiteFixtureTab : Swift.Hashable {}
extension ITStatsAndScores.LiteCompetitionInfo : Swift.Equatable {}
extension ITStatsAndScores.LiteCompetitionInfo : Swift.Hashable {}
extension ITStatsAndScores.OldAnalyticsEvent : Swift.Equatable {}
extension ITStatsAndScores.OldAnalyticsEvent : Swift.Hashable {}
extension ITStatsAndScores.OldAnalyticsEvent : Swift.RawRepresentable {}
extension ITStatsAndScores.ITConfiguration : Swift.Sendable {}
extension ITStatsAndScores.LiteTeamInfo : Swift.Equatable {}
extension ITStatsAndScores.LiteTeamInfo : Swift.Hashable {}
extension ITStatsAndScores.LiteTeamInfo : Swift.RawRepresentable {}
extension ITStatsAndScores.ITNavigationType : Swift.Equatable {}
extension ITStatsAndScores.ITNavigationType : Swift.Hashable {}
extension ITStatsAndScores.ITNavigationType : Swift.RawRepresentable {}
extension ITStatsAndScores.ITFollowType : Swift.Equatable {}
extension ITStatsAndScores.ITFollowType : Swift.Hashable {}
extension ITStatsAndScores.ITFollowType : Swift.RawRepresentable {}
